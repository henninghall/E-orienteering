// Lab 4, terrain generation

#ifdef __APPLE__
	#include <OpenGL/gl3.h>
	// Linking hint for Lightweight IDE
	// uses framework Cocoa
#endif
#include "MicroGlut.h"
#include "GL_utilities.h"
#include "VectorUtils3.h"
#include "loadobj.h"
#include "LoadTGA.h"

mat4 projectionMatrix;

Model* GenerateTerrain(TextureData *tex)
{
	int vertexCount = tex->width * tex->height;
	int triangleCount = (tex->width-1) * (tex->height-1) * 2;
	int x, z;

	GLfloat *vertexArray = malloc(sizeof(GLfloat) * 3 * vertexCount);
	GLfloat *normalArray = malloc(sizeof(GLfloat) * 3 * vertexCount);
	GLfloat *texCoordArray = malloc(sizeof(GLfloat) * 2 * vertexCount);
	GLuint *indexArray = malloc(sizeof(GLuint) * triangleCount*3);

	printf("bpp %d\n", tex->bpp);
	for (x = 0; x < tex->width; x++)
		for (z = 0; z < tex->height; z++)
		{
// Vertex array. You need to scale this properly
			vertexArray[(x + z * tex->width)*3 + 0] = x / 1.0;
			vertexArray[(x + z * tex->width)*3 + 1] = tex->imageData[(x + z * tex->width) * (tex->bpp/8)] / 100.0;
			vertexArray[(x + z * tex->width)*3 + 2] = z / 1.0;
// Normal vectors. You need to calculate these.
			normalArray[(x + z * tex->width)*3 + 0] = 0.0;
			normalArray[(x + z * tex->width)*3 + 1] = 1.0;
			normalArray[(x + z * tex->width)*3 + 2] = 0.0;
// Texture coordinates. You may want to scale them.
			texCoordArray[(x + z * tex->width)*2 + 0] = x; // (float)x / tex->width;
			texCoordArray[(x + z * tex->width)*2 + 1] = z; // (float)z / tex->height;
		}
	for (x = 0; x < tex->width-1; x++)
		for (z = 0; z < tex->height-1; z++)
		{
		// Triangle 1
			indexArray[(x + z * (tex->width-1))*6 + 0] = x + z * tex->width;
			indexArray[(x + z * (tex->width-1))*6 + 1] = x + (z+1) * tex->width;
			indexArray[(x + z * (tex->width-1))*6 + 2] = x+1 + z * tex->width;
		// Triangle 2
			indexArray[(x + z * (tex->width-1))*6 + 3] = x+1 + z * tex->width;
			indexArray[(x + z * (tex->width-1))*6 + 4] = x + (z+1) * tex->width;
			indexArray[(x + z * (tex->width-1))*6 + 5] = x+1 + (z+1) * tex->width;
		}

	// End of terrain generation

	// Create Model and upload to GPU:

	Model* model = LoadDataToModel(
			vertexArray,
			normalArray,
			texCoordArray,
			NULL,
			indexArray,
			vertexCount,
			triangleCount*3);

	return model;
}


// vertex array object
Model *m, *m2, *tm;
// Reference to shader program
GLuint program;
GLuint tex1, tex2;
TextureData ttex; // terrain
GLfloat x = 0;
GLfloat y = 0;
GLfloat z = 0;
GLfloat lookAtY = 0;
GLfloat lookAtX = 0;	
vec3 cam = {0, 5, 0};


vec3 position = { 0, 0, 5 };
// horizontal angle : toward -Z
GLfloat horizontalAngle = 3.14f;
// vertical angle : 0, look at the horizon
GLfloat verticalAngle = 0.0f;

// Initial Field of View 
// FoV is the level of zoom. 80째 = very wide angle, huge deformations. 60째 - 45째 : standard. 20째 : big zoom.
GLfloat initialFoV = 45.0f;

GLfloat speed = 3.0f; // 3 units / second
GLfloat mouseSpeed = 0.005f;



// mouese coordinates
GLfloat xpos;
GLfloat ypos;

void handleKeyPress(){
	if (glutKeyIsDown('s')) {
		cam.z = cam.z + 1;
	}
	if (glutKeyIsDown('w')) {
		cam.z = cam.z - 1;
	}
	if (glutKeyIsDown('d')) {
		cam.x = cam.x + 1;
	}
	if (glutKeyIsDown('a')) {
		cam.x = cam.x - 1;
	}
}

void init(void)
{
	// GL inits
	glClearColor(0.2,0.2,0.5,0);
	glEnable(GL_DEPTH_TEST);
	glDisable(GL_CULL_FACE);
	printError("GL inits");

	projectionMatrix = frustum(-0.1, 0.1, -0.1, 0.1, 0.2, 50.0);

	// Load and compile shader
	program = loadShaders("terrain.vert", "terrain.frag");
	glUseProgram(program);
	printError("init shader");

	glUniformMatrix4fv(glGetUniformLocation(program, "projMatrix"), 1, GL_TRUE, projectionMatrix.m);
	glUniform1i(glGetUniformLocation(program, "tex"), 0); // Texture unit 0
	LoadTGATextureSimple("maskros512.tga", &tex1);

// Load terrain data

	LoadTGATextureData("fft-terrain.tga", &ttex);
	tm = GenerateTerrain(&ttex);
	printError("init terrain");
}
    	 GLfloat oldTimeSinceStart = 0;

void display(void) {

	handleKeyPress();
	glutWarpPointer(300, 300);
	
	GLfloat timeSinceStart = glutGet(GLUT_ELAPSED_TIME);
    	GLfloat deltaTime = timeSinceStart - oldTimeSinceStart;
   	oldTimeSinceStart = timeSinceStart;

	
	horizontalAngle += mouseSpeed * deltaTime * 300 - xpos ;
	verticalAngle   += mouseSpeed * deltaTime * 300 - ypos ;

	printf("%f %f\n", horizontalAngle, verticalAngle);

	
	vec3 direction = {
   	 cos(verticalAngle) * sin(horizontalAngle),
   	 sin(verticalAngle),
   	 cos(verticalAngle) * cos(horizontalAngle)
	};
	
	vec3 right = {
    		sin(horizontalAngle - 3.14f/2.0f),
  	  	0,
  	  	cos(horizontalAngle - 3.14f/2.0f)
	};
	
	vec3 crossProduct;

	 crossProduct = cross(right, direction );






	// clear the screen
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	mat4 total, modelView, camMatrix;

	printError("pre display");

	glUseProgram(program);

	// Build matrix


	vec3 lookAtPoint = {0, 5, 1};
	camMatrix = lookAt(
		cam.x + x, cam.y, cam.z + z,
		lookAtPoint.x, lookAtPoint.y , lookAtPoint.z,
		0.0, 1.0, 0.0);
	modelView = IdentityMatrix();




	total = Mult(camMatrix, modelView);
	glUniformMatrix4fv(glGetUniformLocation(program, "mdlMatrix"), 1, GL_TRUE, total.m);

	glBindTexture(GL_TEXTURE_2D, tex1);		// Bind Our Texture tex1
	DrawModel(tm, program, "inPosition", "inNormal", "inTexCoord");

	printError("display 2");

	glutSwapBuffers();
}

void timer(int i)
{
	glutTimerFunc(20, &timer, i);
	glutPostRedisplay();
}



void mouse(int x, int y)
{
	xpos = x;
	ypos = y;

}





int main(int argc, char **argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH);
	glutInitContextVersion(3, 2);
	glutInitWindowSize (600, 600);
	glutCreateWindow ("TSBK07 Lab 4");
	glutDisplayFunc(display);
	init ();
	glutTimerFunc(20, &timer, 0);

	glutPassiveMotionFunc(mouse);

	glutMainLoop();
	exit(0);
}
